/* tslint:disable */
/* eslint-disable */
/**
 * Constant Contact API v3
 * Swagger build version 3.0.2475
 *
 * The version of the OpenAPI document: 1.0.116
 * Contact: webservices@constantcontact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { DeleteTag202Response } from '../models';
// @ts-ignore
import { GetAllTags200Response } from '../models';
// @ts-ignore
import { GetTag200Response } from '../models';
// @ts-ignore
import { PostTagRequest } from '../models';
// @ts-ignore
import { PutTagRequest } from '../models';
/**
 * ContactTagsApi - axios parameter creator
 * @export
 */
export const ContactTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
         * @summary DELETE a Tag
         * @param {string} tagId The ID that uniquely identifies a tag in UUID format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag: async (tagId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('deleteTag', 'tagId', tagId)
            const localVarPath = `/contact_tags/{tag_id}`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to get details for all tags in your account. Use the <code>include_count</code> query parameter to include the total number of contacts assigned each tag. Use the <code>limit</code> query parameter to limit the number of tag results returned per page. To get the next page of results, copy the <code>cursor={the cursor ID}</code> from the resulting href link and add it (<code>&</code>) to the URL. For example:  <p><code>/v3/contact_tags?limit=1&cursor=</code></p><p><code>bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ=</code></p> To learn more, see [Get Tags](/api_guide/tags_get.html).
         * @summary GET Details for All Tags
         * @param {number} [limit] Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;.
         * @param {boolean} [includeCount] Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTags: async (limit?: number, includeCount?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contact_tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (includeCount !== undefined) {
                localVarQueryParameter['include_count'] = includeCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get tag details for a specified `tag_id`. Use the `include_count` query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag\'s Details](/api_guide/tags_get_single.html).
         * @summary GET Tag Details
         * @param {string} tagId The ID that uniquely identifies a tag (UUID format).
         * @param {boolean} [includeCount] Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag: async (tagId: string, includeCount?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getTag', 'tagId', tagId)
            const localVarPath = `/contact_tags/{tag_id}`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)

            if (includeCount !== undefined) {
                localVarQueryParameter['include_count'] = includeCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to create a new tag. The tag `name` is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (`tag_source`) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
         * @summary POST (Create) a Tag
         * @param {PostTagRequest} postTagRequest The JSON payload to use to create a new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTag: async (postTagRequest: PostTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTagRequest' is not null or undefined
            assertParamExists('postTag', 'postTagRequest', postTagRequest)
            const localVarPath = `/contact_tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to rename an existing tag to a new unique tag name (`name`). The maximum length is 255 characters. The `tag_source` value cannot be updated using this method. You can set the `tag_source` value using the `POST contact_tags method`. [Learn more](/api_guide/tags_update.html)
         * @summary PUT (Update) a Tag
         * @param {string} tagId The system generated ID used to uniquely identify the tag that you want to rename (UUID format).
         * @param {PutTagRequest} putTagRequest The JSON payload used to update the tag name (&#x60;name&#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTag: async (tagId: string, putTagRequest: PutTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('putTag', 'tagId', tagId)
            // verify required parameter 'putTagRequest' is not null or undefined
            assertParamExists('putTag', 'putTagRequest', putTagRequest)
            const localVarPath = `/contact_tags/{tag_id}`
                .replace(`{${"tag_id"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactTagsApi - functional programming interface
 * @export
 */
export const ContactTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
         * @summary DELETE a Tag
         * @param {string} tagId The ID that uniquely identifies a tag in UUID format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag(tagId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteTag202Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTag(tagId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactTagsApi.deleteTag']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this endpoint to get details for all tags in your account. Use the <code>include_count</code> query parameter to include the total number of contacts assigned each tag. Use the <code>limit</code> query parameter to limit the number of tag results returned per page. To get the next page of results, copy the <code>cursor={the cursor ID}</code> from the resulting href link and add it (<code>&</code>) to the URL. For example:  <p><code>/v3/contact_tags?limit=1&cursor=</code></p><p><code>bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ=</code></p> To learn more, see [Get Tags](/api_guide/tags_get.html).
         * @summary GET Details for All Tags
         * @param {number} [limit] Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;.
         * @param {boolean} [includeCount] Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTags(limit?: number, includeCount?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllTags200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTags(limit, includeCount, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactTagsApi.getAllTags']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method to get tag details for a specified `tag_id`. Use the `include_count` query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag\'s Details](/api_guide/tags_get_single.html).
         * @summary GET Tag Details
         * @param {string} tagId The ID that uniquely identifies a tag (UUID format).
         * @param {boolean} [includeCount] Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTag(tagId: string, includeCount?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTag200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTag(tagId, includeCount, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactTagsApi.getTag']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method to create a new tag. The tag `name` is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (`tag_source`) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
         * @summary POST (Create) a Tag
         * @param {PostTagRequest} postTagRequest The JSON payload to use to create a new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTag(postTagRequest: PostTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTag200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTag(postTagRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactTagsApi.postTag']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method to rename an existing tag to a new unique tag name (`name`). The maximum length is 255 characters. The `tag_source` value cannot be updated using this method. You can set the `tag_source` value using the `POST contact_tags method`. [Learn more](/api_guide/tags_update.html)
         * @summary PUT (Update) a Tag
         * @param {string} tagId The system generated ID used to uniquely identify the tag that you want to rename (UUID format).
         * @param {PutTagRequest} putTagRequest The JSON payload used to update the tag name (&#x60;name&#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTag(tagId: string, putTagRequest: PutTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTag200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTag(tagId, putTagRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactTagsApi.putTag']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ContactTagsApi - factory interface
 * @export
 */
export const ContactTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactTagsApiFp(configuration)
    return {
        /**
         * Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
         * @summary DELETE a Tag
         * @param {string} tagId The ID that uniquely identifies a tag in UUID format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(tagId: string, options?: any): AxiosPromise<DeleteTag202Response> {
            return localVarFp.deleteTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get details for all tags in your account. Use the <code>include_count</code> query parameter to include the total number of contacts assigned each tag. Use the <code>limit</code> query parameter to limit the number of tag results returned per page. To get the next page of results, copy the <code>cursor={the cursor ID}</code> from the resulting href link and add it (<code>&</code>) to the URL. For example:  <p><code>/v3/contact_tags?limit=1&cursor=</code></p><p><code>bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ=</code></p> To learn more, see [Get Tags](/api_guide/tags_get.html).
         * @summary GET Details for All Tags
         * @param {number} [limit] Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;.
         * @param {boolean} [includeCount] Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTags(limit?: number, includeCount?: boolean, options?: any): AxiosPromise<GetAllTags200Response> {
            return localVarFp.getAllTags(limit, includeCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get tag details for a specified `tag_id`. Use the `include_count` query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag\'s Details](/api_guide/tags_get_single.html).
         * @summary GET Tag Details
         * @param {string} tagId The ID that uniquely identifies a tag (UUID format).
         * @param {boolean} [includeCount] Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(tagId: string, includeCount?: boolean, options?: any): AxiosPromise<GetTag200Response> {
            return localVarFp.getTag(tagId, includeCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to create a new tag. The tag `name` is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (`tag_source`) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
         * @summary POST (Create) a Tag
         * @param {PostTagRequest} postTagRequest The JSON payload to use to create a new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTag(postTagRequest: PostTagRequest, options?: any): AxiosPromise<GetTag200Response> {
            return localVarFp.postTag(postTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to rename an existing tag to a new unique tag name (`name`). The maximum length is 255 characters. The `tag_source` value cannot be updated using this method. You can set the `tag_source` value using the `POST contact_tags method`. [Learn more](/api_guide/tags_update.html)
         * @summary PUT (Update) a Tag
         * @param {string} tagId The system generated ID used to uniquely identify the tag that you want to rename (UUID format).
         * @param {PutTagRequest} putTagRequest The JSON payload used to update the tag name (&#x60;name&#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTag(tagId: string, putTagRequest: PutTagRequest, options?: any): AxiosPromise<GetTag200Response> {
            return localVarFp.putTag(tagId, putTagRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactTagsApi - object-oriented interface
 * @export
 * @class ContactTagsApi
 * @extends {BaseAPI}
 */
export class ContactTagsApi extends BaseAPI {
    /**
     * Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
     * @summary DELETE a Tag
     * @param {string} tagId The ID that uniquely identifies a tag in UUID format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactTagsApi
     */
    public deleteTag(tagId: string, options?: RawAxiosRequestConfig) {
        return ContactTagsApiFp(this.configuration).deleteTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to get details for all tags in your account. Use the <code>include_count</code> query parameter to include the total number of contacts assigned each tag. Use the <code>limit</code> query parameter to limit the number of tag results returned per page. To get the next page of results, copy the <code>cursor={the cursor ID}</code> from the resulting href link and add it (<code>&</code>) to the URL. For example:  <p><code>/v3/contact_tags?limit=1&cursor=</code></p><p><code>bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ=</code></p> To learn more, see [Get Tags](/api_guide/tags_get.html).
     * @summary GET Details for All Tags
     * @param {number} [limit] Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;.
     * @param {boolean} [includeCount] Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactTagsApi
     */
    public getAllTags(limit?: number, includeCount?: boolean, options?: RawAxiosRequestConfig) {
        return ContactTagsApiFp(this.configuration).getAllTags(limit, includeCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get tag details for a specified `tag_id`. Use the `include_count` query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag\'s Details](/api_guide/tags_get_single.html).
     * @summary GET Tag Details
     * @param {string} tagId The ID that uniquely identifies a tag (UUID format).
     * @param {boolean} [includeCount] Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactTagsApi
     */
    public getTag(tagId: string, includeCount?: boolean, options?: RawAxiosRequestConfig) {
        return ContactTagsApiFp(this.configuration).getTag(tagId, includeCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to create a new tag. The tag `name` is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (`tag_source`) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
     * @summary POST (Create) a Tag
     * @param {PostTagRequest} postTagRequest The JSON payload to use to create a new tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactTagsApi
     */
    public postTag(postTagRequest: PostTagRequest, options?: RawAxiosRequestConfig) {
        return ContactTagsApiFp(this.configuration).postTag(postTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to rename an existing tag to a new unique tag name (`name`). The maximum length is 255 characters. The `tag_source` value cannot be updated using this method. You can set the `tag_source` value using the `POST contact_tags method`. [Learn more](/api_guide/tags_update.html)
     * @summary PUT (Update) a Tag
     * @param {string} tagId The system generated ID used to uniquely identify the tag that you want to rename (UUID format).
     * @param {PutTagRequest} putTagRequest The JSON payload used to update the tag name (&#x60;name&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactTagsApi
     */
    public putTag(tagId: string, putTagRequest: PutTagRequest, options?: RawAxiosRequestConfig) {
        return ContactTagsApiFp(this.configuration).putTag(tagId, putTagRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

