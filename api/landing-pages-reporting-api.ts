/* tslint:disable */
/* eslint-disable */
/**
 * Constant Contact API v3
 * Swagger build version 3.0.2475
 *
 * The version of the OpenAPI document: 1.0.116
 * Contact: webservices@constantcontact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GetContactAdds200Response } from '../models';
// @ts-ignore
import { GetUniqueContactClicks200Response } from '../models';
// @ts-ignore
import { GetUniqueContactOpens200Response } from '../models';
// @ts-ignore
import { GetUniqueContactSMSOptIns200Response } from '../models';
// @ts-ignore
import { GetUniqueContactUpdates200Response } from '../models';
/**
 * LandingPagesReportingApi - axios parameter creator
 * @export
 */
export const LandingPagesReportingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Adds Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactAdds: async (campaignActivityId: string, limit?: string, contactsFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignActivityId' is not null or undefined
            assertParamExists('getContactAdds', 'campaignActivityId', campaignActivityId)
            const localVarPath = `/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_adds`
                .replace(`{${"campaign_activity_id"}}`, encodeURIComponent(String(campaignActivityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["campaign_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["campaign_data"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (contactsFilter !== undefined) {
                localVarQueryParameter['contacts_filter'] = contactsFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Contacts Opens Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactOpens: async (campaignActivityId: string, limit?: string, contactsFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignActivityId' is not null or undefined
            assertParamExists('getContactOpens', 'campaignActivityId', campaignActivityId)
            const localVarPath = `/reports/landing_pages/campaign_details/{campaign_activity_id}/p_contact_opens`
                .replace(`{${"campaign_activity_id"}}`, encodeURIComponent(String(campaignActivityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["campaign_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["campaign_data"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (contactsFilter !== undefined) {
                localVarQueryParameter['contacts_filter'] = contactsFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Clicks Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactClicks: async (campaignActivityId: string, limit?: string, contactsFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignActivityId' is not null or undefined
            assertParamExists('getUniqueContactClicks', 'campaignActivityId', campaignActivityId)
            const localVarPath = `/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_clicks`
                .replace(`{${"campaign_activity_id"}}`, encodeURIComponent(String(campaignActivityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["campaign_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["campaign_data"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (contactsFilter !== undefined) {
                localVarQueryParameter['contacts_filter'] = contactsFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Opens Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactOpens: async (campaignActivityId: string, limit?: string, contactsFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignActivityId' is not null or undefined
            assertParamExists('getUniqueContactOpens', 'campaignActivityId', campaignActivityId)
            const localVarPath = `/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_opens`
                .replace(`{${"campaign_activity_id"}}`, encodeURIComponent(String(campaignActivityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["campaign_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["campaign_data"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (contactsFilter !== undefined) {
                localVarQueryParameter['contacts_filter'] = contactsFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts SMS Opt-In Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactSMSOptIns: async (campaignActivityId: string, limit?: string, contactsFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignActivityId' is not null or undefined
            assertParamExists('getUniqueContactSMSOptIns', 'campaignActivityId', campaignActivityId)
            const localVarPath = `/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_sms_optins`
                .replace(`{${"campaign_activity_id"}}`, encodeURIComponent(String(campaignActivityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["campaign_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["campaign_data"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (contactsFilter !== undefined) {
                localVarQueryParameter['contacts_filter'] = contactsFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Updates Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactUpdates: async (campaignActivityId: string, limit?: string, contactsFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignActivityId' is not null or undefined
            assertParamExists('getUniqueContactUpdates', 'campaignActivityId', campaignActivityId)
            const localVarPath = `/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_updates`
                .replace(`{${"campaign_activity_id"}}`, encodeURIComponent(String(campaignActivityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["campaign_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["campaign_data"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (contactsFilter !== undefined) {
                localVarQueryParameter['contacts_filter'] = contactsFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LandingPagesReportingApi - functional programming interface
 * @export
 */
export const LandingPagesReportingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LandingPagesReportingApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Adds Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactAdds(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContactAdds200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactAdds(campaignActivityId, limit, contactsFilter, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LandingPagesReportingApi.getContactAdds']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Contacts Opens Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactOpens(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUniqueContactOpens200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactOpens(campaignActivityId, limit, contactsFilter, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LandingPagesReportingApi.getContactOpens']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Clicks Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniqueContactClicks(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUniqueContactClicks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUniqueContactClicks(campaignActivityId, limit, contactsFilter, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LandingPagesReportingApi.getUniqueContactClicks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Opens Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniqueContactOpens(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUniqueContactOpens200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUniqueContactOpens(campaignActivityId, limit, contactsFilter, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LandingPagesReportingApi.getUniqueContactOpens']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts SMS Opt-In Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniqueContactSMSOptIns(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUniqueContactSMSOptIns200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUniqueContactSMSOptIns(campaignActivityId, limit, contactsFilter, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LandingPagesReportingApi.getUniqueContactSMSOptIns']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Updates Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniqueContactUpdates(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUniqueContactUpdates200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUniqueContactUpdates(campaignActivityId, limit, contactsFilter, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LandingPagesReportingApi.getUniqueContactUpdates']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LandingPagesReportingApi - factory interface
 * @export
 */
export const LandingPagesReportingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LandingPagesReportingApiFp(configuration)
    return {
        /**
         * Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Adds Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactAdds(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: any): AxiosPromise<GetContactAdds200Response> {
            return localVarFp.getContactAdds(campaignActivityId, limit, contactsFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Contacts Opens Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactOpens(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: any): AxiosPromise<GetUniqueContactOpens200Response> {
            return localVarFp.getContactOpens(campaignActivityId, limit, contactsFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Clicks Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactClicks(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: any): AxiosPromise<GetUniqueContactClicks200Response> {
            return localVarFp.getUniqueContactClicks(campaignActivityId, limit, contactsFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Opens Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactOpens(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: any): AxiosPromise<GetUniqueContactOpens200Response> {
            return localVarFp.getUniqueContactOpens(campaignActivityId, limit, contactsFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts SMS Opt-In Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactSMSOptIns(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: any): AxiosPromise<GetUniqueContactSMSOptIns200Response> {
            return localVarFp.getUniqueContactSMSOptIns(campaignActivityId, limit, contactsFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
         * @summary GET a Unique Contacts Updates Landing Page Report
         * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
         * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
         * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueContactUpdates(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: any): AxiosPromise<GetUniqueContactUpdates200Response> {
            return localVarFp.getUniqueContactUpdates(campaignActivityId, limit, contactsFilter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LandingPagesReportingApi - object-oriented interface
 * @export
 * @class LandingPagesReportingApi
 * @extends {BaseAPI}
 */
export class LandingPagesReportingApi extends BaseAPI {
    /**
     * Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by `contact_id`. The resulting contact data is listed with most recent activity first.
     * @summary GET a Unique Contacts Adds Landing Page Report
     * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact results.
     * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
     * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesReportingApi
     */
    public getContactAdds(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig) {
        return LandingPagesReportingApiFp(this.configuration).getContactAdds(campaignActivityId, limit, contactsFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
     * @summary GET a Contacts Opens Landing Page Report
     * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
     * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
     * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesReportingApi
     */
    public getContactOpens(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig) {
        return LandingPagesReportingApiFp(this.configuration).getContactOpens(campaignActivityId, limit, contactsFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the `contact_id` and `url_id`. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
     * @summary GET a Unique Contacts Clicks Landing Page Report
     * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
     * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
     * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesReportingApi
     */
    public getUniqueContactClicks(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig) {
        return LandingPagesReportingApiFp(this.configuration).getUniqueContactClicks(campaignActivityId, limit, contactsFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
     * @summary GET a Unique Contacts Opens Landing Page Report
     * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
     * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
     * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesReportingApi
     */
    public getUniqueContactOpens(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig) {
        return LandingPagesReportingApiFp(this.configuration).getUniqueContactOpens(campaignActivityId, limit, contactsFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by `contact_id``.  The resulting contact data is listed with most recent activity first.
     * @summary GET a Unique Contacts SMS Opt-In Landing Page Report
     * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact click results.
     * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
     * @param {string} [contactsFilter] Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesReportingApi
     */
    public getUniqueContactSMSOptIns(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig) {
        return LandingPagesReportingApiFp(this.configuration).getUniqueContactSMSOptIns(campaignActivityId, limit, contactsFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by `contact_id`.  The resulting contact data is listed with most recent activity first.
     * @summary GET a Unique Contacts Updates Landing Page Report
     * @param {string} campaignActivityId The landing page &#x60;campaign_activity_id&#x60; (UUID\&#39;s) to use to get unique contact open results.
     * @param {string} [limit] Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page.
     * @param {string} [contactsFilter] Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandingPagesReportingApi
     */
    public getUniqueContactUpdates(campaignActivityId: string, limit?: string, contactsFilter?: string, options?: RawAxiosRequestConfig) {
        return LandingPagesReportingApiFp(this.configuration).getUniqueContactUpdates(campaignActivityId, limit, contactsFilter, options).then((request) => request(this.axios, this.basePath));
    }
}

