/* tslint:disable */
/* eslint-disable */
/**
 * Constant Contact API v3
 * Swagger build version 3.0.2475
 *
 * The version of the OpenAPI document: 1.0.85
 * Contact: webservices@constantcontact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GetContactOpenClickRateReport200Response } from '../models';
// @ts-ignore
import { GetContactTrackingCountReport200Response } from '../models';
// @ts-ignore
import { GetContactTrackingReport200Response } from '../models';
/**
 * ContactsReportingApi - axios parameter creator
 * @export
 */
export const ContactsReportingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>
         * @summary GET Average Open and Click Rates
         * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
         * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
         * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactOpenClickRateReport: async (contactId: string, start: string, end: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getContactOpenClickRateReport', 'contactId', contactId)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getContactOpenClickRateReport', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getContactOpenClickRateReport', 'end', end)
            const localVarPath = `/reports/contact_reports/{contact_id}/open_and_click_rates`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
         * @summary GET Contact Action Summary
         * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
         * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
         * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactTrackingCountReport: async (contactId: string, start: string, end: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getContactTrackingCountReport', 'contactId', contactId)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getContactTrackingCountReport', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getContactTrackingCountReport', 'end', end)
            const localVarPath = `/reports/contact_reports/{contact_id}/activity_summary`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Gets the tracking activity data for a single contact, sorted in descending activity date order.</p> <p>You must chose either the `tracking_activities_list` query parameter and or the `tracking_activity_type` query parameter to specify one or more tracking activity types In the request. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.</p>       <table><tr><td colspan=\'2\'>Valid tracking activity types</td></tr>         <tr><td><b>em_sends</b></td><td>Send activities</td></tr>         <tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr>         <tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr>         <tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr>         <tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr>         <td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr>         <tr><td><b>p_contact_open</b></td><td>Landing page opens</td></tr>         <tr><td><b>p_contact_click</b></td><td>Landing page clicks</td></tr>         <tr><td><b>p_contact_add</b></td><td>Landing page adds</td></tr>         <tr><td><b>p_contact_update </b></td><td> Landing page updates</td></tr>       </table>
         * @summary GET Contact Activity Details
         * @param {string} contactId The contact\&#39;s ID for which tracking activity data is requested.
         * @param {Array<GetContactTrackingReportTrackingActivitiesListEnum>} [trackingActivitiesList] Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
         * @param {Array<string>} [trackingActivityType] Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
         * @param {boolean} [includeCampaignActivityNames] Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient.
         * @param {string} [limit] The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactTrackingReport: async (contactId: string, trackingActivitiesList?: Array<GetContactTrackingReportTrackingActivitiesListEnum>, trackingActivityType?: Array<string>, includeCampaignActivityNames?: boolean, limit?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getContactTrackingReport', 'contactId', contactId)
            const localVarPath = `/reports/contact_reports/{contact_id}/activity_details`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2_access_code required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_access_code", ["contact_data"], configuration)

            // authentication oauth2_implicit required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2_implicit", ["contact_data"], configuration)

            if (trackingActivitiesList) {
                localVarQueryParameter['tracking_activities_list'] = trackingActivitiesList;
            }

            if (trackingActivityType) {
                localVarQueryParameter['tracking_activity_type'] = trackingActivityType.join(COLLECTION_FORMATS.csv);
            }

            if (includeCampaignActivityNames !== undefined) {
                localVarQueryParameter['include_campaign_activity_names'] = includeCampaignActivityNames;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsReportingApi - functional programming interface
 * @export
 */
export const ContactsReportingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactsReportingApiAxiosParamCreator(configuration)
    return {
        /**
         * <p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>
         * @summary GET Average Open and Click Rates
         * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
         * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
         * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactOpenClickRateReport(contactId: string, start: string, end: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContactOpenClickRateReport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactOpenClickRateReport(contactId, start, end, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactsReportingApi.getContactOpenClickRateReport']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
         * @summary GET Contact Action Summary
         * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
         * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
         * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactTrackingCountReport(contactId: string, start: string, end: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContactTrackingCountReport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactTrackingCountReport(contactId, start, end, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactsReportingApi.getContactTrackingCountReport']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * <p>Gets the tracking activity data for a single contact, sorted in descending activity date order.</p> <p>You must chose either the `tracking_activities_list` query parameter and or the `tracking_activity_type` query parameter to specify one or more tracking activity types In the request. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.</p>       <table><tr><td colspan=\'2\'>Valid tracking activity types</td></tr>         <tr><td><b>em_sends</b></td><td>Send activities</td></tr>         <tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr>         <tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr>         <tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr>         <tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr>         <td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr>         <tr><td><b>p_contact_open</b></td><td>Landing page opens</td></tr>         <tr><td><b>p_contact_click</b></td><td>Landing page clicks</td></tr>         <tr><td><b>p_contact_add</b></td><td>Landing page adds</td></tr>         <tr><td><b>p_contact_update </b></td><td> Landing page updates</td></tr>       </table>
         * @summary GET Contact Activity Details
         * @param {string} contactId The contact\&#39;s ID for which tracking activity data is requested.
         * @param {Array<GetContactTrackingReportTrackingActivitiesListEnum>} [trackingActivitiesList] Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
         * @param {Array<string>} [trackingActivityType] Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
         * @param {boolean} [includeCampaignActivityNames] Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient.
         * @param {string} [limit] The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactTrackingReport(contactId: string, trackingActivitiesList?: Array<GetContactTrackingReportTrackingActivitiesListEnum>, trackingActivityType?: Array<string>, includeCampaignActivityNames?: boolean, limit?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContactTrackingReport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactTrackingReport(contactId, trackingActivitiesList, trackingActivityType, includeCampaignActivityNames, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ContactsReportingApi.getContactTrackingReport']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ContactsReportingApi - factory interface
 * @export
 */
export const ContactsReportingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactsReportingApiFp(configuration)
    return {
        /**
         * <p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>
         * @summary GET Average Open and Click Rates
         * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
         * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
         * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactOpenClickRateReport(contactId: string, start: string, end: string, options?: any): AxiosPromise<GetContactOpenClickRateReport200Response> {
            return localVarFp.getContactOpenClickRateReport(contactId, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
         * @summary GET Contact Action Summary
         * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
         * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
         * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactTrackingCountReport(contactId: string, start: string, end: string, options?: any): AxiosPromise<GetContactTrackingCountReport200Response> {
            return localVarFp.getContactTrackingCountReport(contactId, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Gets the tracking activity data for a single contact, sorted in descending activity date order.</p> <p>You must chose either the `tracking_activities_list` query parameter and or the `tracking_activity_type` query parameter to specify one or more tracking activity types In the request. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.</p>       <table><tr><td colspan=\'2\'>Valid tracking activity types</td></tr>         <tr><td><b>em_sends</b></td><td>Send activities</td></tr>         <tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr>         <tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr>         <tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr>         <tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr>         <td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr>         <tr><td><b>p_contact_open</b></td><td>Landing page opens</td></tr>         <tr><td><b>p_contact_click</b></td><td>Landing page clicks</td></tr>         <tr><td><b>p_contact_add</b></td><td>Landing page adds</td></tr>         <tr><td><b>p_contact_update </b></td><td> Landing page updates</td></tr>       </table>
         * @summary GET Contact Activity Details
         * @param {string} contactId The contact\&#39;s ID for which tracking activity data is requested.
         * @param {Array<GetContactTrackingReportTrackingActivitiesListEnum>} [trackingActivitiesList] Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
         * @param {Array<string>} [trackingActivityType] Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
         * @param {boolean} [includeCampaignActivityNames] Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient.
         * @param {string} [limit] The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactTrackingReport(contactId: string, trackingActivitiesList?: Array<GetContactTrackingReportTrackingActivitiesListEnum>, trackingActivityType?: Array<string>, includeCampaignActivityNames?: boolean, limit?: string, options?: any): AxiosPromise<GetContactTrackingReport200Response> {
            return localVarFp.getContactTrackingReport(contactId, trackingActivitiesList, trackingActivityType, includeCampaignActivityNames, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactsReportingApi - object-oriented interface
 * @export
 * @class ContactsReportingApi
 * @extends {BaseAPI}
 */
export class ContactsReportingApi extends BaseAPI {
    /**
     * <p>Gets the average open and click rate for a given account and contact.<p>Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.</p><p>Returns the rates and the number of campaign activities that were included in the calculation.</p><p>If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.</p>
     * @summary GET Average Open and Click Rates
     * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
     * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
     * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsReportingApi
     */
    public getContactOpenClickRateReport(contactId: string, start: string, end: string, options?: RawAxiosRequestConfig) {
        return ContactsReportingApiFp(this.configuration).getContactOpenClickRateReport(contactId, start, end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
     * @summary GET Contact Action Summary
     * @param {string} contactId The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)
     * @param {string} start The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.
     * @param {string} end The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsReportingApi
     */
    public getContactTrackingCountReport(contactId: string, start: string, end: string, options?: RawAxiosRequestConfig) {
        return ContactsReportingApiFp(this.configuration).getContactTrackingCountReport(contactId, start, end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <p>Gets the tracking activity data for a single contact, sorted in descending activity date order.</p> <p>You must chose either the `tracking_activities_list` query parameter and or the `tracking_activity_type` query parameter to specify one or more tracking activity types In the request. The `tracking_activities_list`  and `tracking_activities_type` query parameters are mutually exclusive.</p>       <table><tr><td colspan=\'2\'>Valid tracking activity types</td></tr>         <tr><td><b>em_sends</b></td><td>Send activities</td></tr>         <tr><td><b>em_opens</b></td><td>Email open tracking activities</td></tr>         <tr><td><b>em_clicks</b></td><td>Link click-through tracking activities</td></tr>         <tr><td><b>em_bounces</b></td><td>Bounce tracking activities</td></tr>         <tr><td><b>em_optouts</b></td><td>Opt-out tracking activities</td></tr><tr>         <td><b>em_forwards</b></td><td>Forward to a friend tracking activities</td></tr>         <tr><td><b>p_contact_open</b></td><td>Landing page opens</td></tr>         <tr><td><b>p_contact_click</b></td><td>Landing page clicks</td></tr>         <tr><td><b>p_contact_add</b></td><td>Landing page adds</td></tr>         <tr><td><b>p_contact_update </b></td><td> Landing page updates</td></tr>       </table>
     * @summary GET Contact Activity Details
     * @param {string} contactId The contact\&#39;s ID for which tracking activity data is requested.
     * @param {Array<GetContactTrackingReportTrackingActivitiesListEnum>} [trackingActivitiesList] Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
     * @param {Array<string>} [trackingActivityType] Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.
     * @param {boolean} [includeCampaignActivityNames] Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient.
     * @param {string} [limit] The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsReportingApi
     */
    public getContactTrackingReport(contactId: string, trackingActivitiesList?: Array<GetContactTrackingReportTrackingActivitiesListEnum>, trackingActivityType?: Array<string>, includeCampaignActivityNames?: boolean, limit?: string, options?: RawAxiosRequestConfig) {
        return ContactsReportingApiFp(this.configuration).getContactTrackingReport(contactId, trackingActivitiesList, trackingActivityType, includeCampaignActivityNames, limit, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetContactTrackingReportTrackingActivitiesListEnum = {
    EmSends: 'em_sends',
    EmOpens: 'em_opens',
    EmClicks: 'em_clicks',
    EmBounces: 'em_bounces',
    EmOptouts: 'em_optouts',
    EmForwards: 'em_forwards',
    PContactOpen: 'p_contact_open',
    PContactClick: 'p_contact_click',
    PContactAdd: 'p_contact_add',
    PContactUpdate: 'p_contact_update'
} as const;
export type GetContactTrackingReportTrackingActivitiesListEnum = typeof GetContactTrackingReportTrackingActivitiesListEnum[keyof typeof GetContactTrackingReportTrackingActivitiesListEnum];
